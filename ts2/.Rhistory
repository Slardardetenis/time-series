install.packages("curl")
install.packages("devtools")
install.packages("rversions")
install.packages("xml2")
install.packages("devtolls")
install.packages("devtools")
install.packages("xml2")
install.packages("devtools")
install.packages("devtools")
install.packages("xml2")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("xml2")
install.packages("rversions")
install.packages("devtools")
install.packages("devtools")
library(devtools)
?gamma
?rgamma
qgamma(0.025,20,2)
qgamma(0.05,20,2)
qgamma(0.95,20,2)
q()
install.packages("ts")
require(ts)
library(ts)
?acf
pacf
?pacf
?arima
?arma
?ar
?ma
?am
?ar
?MA
?arima.sim
?filter
library(ts)
data = read.csv("daily-maximum-temperatures-in-me.csv",sep=",",header=T)
data = read.csv("daily-maximum-temperatures-in-me.csv",sep=",",header=T)
# programmer: Giovani C R
# link da fonte:
# https://datamarket.com/data/set/2323/daily-maximum-temperatures-in-melbourne-australia-1981-1990#!ds=2323&display=line
rm(list=ls(all=TRUE))
library(dygraphs)
library(xts)
library(zoo)
# funçãoque calcula suavização exponencial
exps <- function(t,a){
if(a<0 || a>1) return("Para de ser burro vc errou o segundo parametro da função")
size <- length(t) # tamanho do vetor de retorno
aux <- rep(0,size) # criando o vetor de retorno
aux[1] <- t[1] # atribuindo o primeiro passo
for(i in 2:size){ # calculando a suavização exponencial
aux[i] <- a*t[i] + (1-a)*t[i-1]
}
return(aux) # retornando o vetor com a suavização esponencial
}
#lendo os dados
data = read.csv("daily-maximum-temperatures-in-me.csv",sep=",",header=T)
# criando o objeto ts serie temporal
ts2 = ts(data[,2],start=c(1981,1),frequency = 365)
# decomposição sazonal
fit2 = stl(ts2,s.window = 365)
# atribuindo a tendencia
trend = fit2$time.series[,2]
# criando xts serie temporal
ts3 = as.xts(data[,2],order.by = as.Date(data[,1],"%Y-%m-%d"))
# serie temporal do primeiro ano 1981
xts81 = xts(data[1:365,2],order.by = as.Date(data[1:365,1],"%Y-%m-%d"))
# criando dygraph
dygraph(ts3) %>%
#   dySeries("mdeaths", label = "Male") %>%
#   dySeries("fdeaths", label = "Female") %>%
dyOptions(stackedGraph = FALSE) %>%
dyRangeSelector(height = 20)
dygraph(xts81) %>%
dyRangeSelector(height = 20)
# estimando a sazonalidade
aux = data
for(i in 1:365)
{
for(k in 1:9)
{
aux[i,2] = aux[i,2] + aux[i+(k*365),2]
}
}
aux[,2] = aux[,2]/10
sazo = rep(aux[1:365,2],10)
# criando objeto xts para sazonalidade
sazoxts = xts(sazo, order.by = as.Date(data[,1],"%Y-%m-%d"))
# plotando sazonalidade (sazoxts)
dygraph(sazoxts)
# subtraindo a sazonalidade da série
aux2 = data[,2] - sazo
# criando objeto ts da série sem subtraida pela sazonalidade
tsnosazo = ts(aux2, start = c(1981,1), frequency = 365)
# criando objeto xts da série subtraida pela sazonalidade
newxts = xts(new[,2], order.by = as.Date(data[,1],"%Y-%m-%d"))
# plotando a serie subtraida pela sazonalidade
dygraph(newxts)
# # suavização exponencial com alpha = 0.7
# suav = exps(data[,2],0.7)
#
# suavxts = xts(suav, order.by = as.Date(data[,1], "%Y-%m-%d"))
# diferenciando a serie temporal d vezes para tentar estacionalizar a série
tsdif = diff(ts2)
acf(tsdif,lag.max = 20)
pacf(tsdif,lag.max = 20)
## Modelando ##
N = 3650
p = 2
q = 2
# MA(2) = ARIMA(0,0,1)
ma2 = arima(tsnosazo, order = c(0,0,2))
# AR(2) = ARIMA(2,0,0)
ar2 = arima(tsnosazo, order = c(2,0,0))
# ARMA(2,2) = ARIMA(2,0,2)
arma22 = arima(tsnosazo, order = c(2,0,2))
# ARIMA(2,1,2)
arima212 = arima(ts2, order = c(2,1,2))
setwd("/home/giovani/Área de Trabalho/time-series/ts2")
ls
function (x = NULL, order.by = index(x), frequency = NULL, unique = TRUE,
tzone = Sys.getenv("TZ"), ...)
{
if (is.null(x) && missing(order.by))
return(structure(.xts(, 0), index = integer()))
if (!timeBased(order.by))
stop("order.by requires an appropriate time-based object")
if (inherits(order.by, "dates"))
tzone <- ""
if (inherits(order.by, "Date")) {
if (!missing(tzone))
warning(paste(sQuote("tzone"), "setting ignored for Date indexes"))
tzone <- "UTC"
}
if (NROW(x) > 0 && NROW(x) != length(order.by))
stop("NROW(x) must match length(order.by)")
orderBy <- class(order.by)
if (inherits(order.by, "Date")) {
order.by <- .POSIXct(unclass(order.by) * 86400, tz = tzone)
}
if (!is.null(x) && !isOrdered(order.by, strictly = !unique)) {
indx <- order(order.by)
if (NCOL(x) > 1 || is.matrix(x) || is.data.frame(x)) {
x <- x[indx, , drop = FALSE]
}
else x <- x[indx]
order.by <- order.by[indx]
}
if (!is.null(x) || length(x) != 0) {
x <- as.matrix(x)
}
else x <- numeric(0)
if (orderBy == "timeDate" && missing(tzone)) {
tzone <- order.by@FinCenter
}
else if (!is.null(attr(order.by, "tzone")) && missing(tzone))
tzone <- attr(order.by, "tzone")
if (inherits(order.by, "dates"))
index <- as.numeric(as.POSIXct(strptime(as.character(order.by),
"(%m/%d/%y %H:%M:%S)")))
else index <- as.numeric(as.POSIXct(order.by))
x <- structure(.Data = x, index = structure(index, tzone = tzone,
tclass = orderBy), class = c("xts", "zoo"), .indexCLASS = orderBy,
tclass = orderBy, .indexTZ = tzone, tzone = tzone, ...)
if (!is.null(attributes(x)$dimnames[[1]]))
dimnames(x) <- dimnames(x)
x
}
# programmer: Giovani C R
# link da fonte:
# https://datamarket.com/data/set/2323/daily-maximum-temperatures-in-melbourne-australia-1981-1990#!ds=2323&display=line
rm(list=ls(all=TRUE))
library(dygraphs)
library(xts)
library(zoo)
# funçãoque calcula suavização exponencial
exps <- function(t,a){
if(a<0 || a>1) return("Para de ser burro vc errou o segundo parametro da função")
size <- length(t) # tamanho do vetor de retorno
aux <- rep(0,size) # criando o vetor de retorno
aux[1] <- t[1] # atribuindo o primeiro passo
for(i in 2:size){ # calculando a suavização exponencial
aux[i] <- a*t[i] + (1-a)*t[i-1]
}
return(aux) # retornando o vetor com a suavização esponencial
}
#lendo os dados
data = read.csv("daily-maximum-temperatures-in-me.csv",sep=",",header=T)
# criando o objeto ts serie temporal
ts2 = ts(data[,2],start=c(1981,1),frequency = 365)
# decomposição sazonal
fit2 = stl(ts2,s.window = 365)
# atribuindo a tendencia
trend = fit2$time.series[,2]
# criando xts serie temporal
ts3 = as.xts(data[,2],order.by = as.Date(data[,1],"%Y-%m-%d"))
# serie temporal do primeiro ano 1981
xts81 = xts(data[1:365,2],order.by = as.Date(data[1:365,1],"%Y-%m-%d"))
# criando dygraph
dygraph(ts3) %>%
#   dySeries("mdeaths", label = "Male") %>%
#   dySeries("fdeaths", label = "Female") %>%
dyOptions(stackedGraph = FALSE) %>%
dyRangeSelector(height = 20)
dygraph(xts81) %>%
dyRangeSelector(height = 20)
# estimando a sazonalidade
aux = data
for(i in 1:365)
{
for(k in 1:9)
{
aux[i,2] = aux[i,2] + aux[i+(k*365),2]
}
}
aux[,2] = aux[,2]/10
sazo = rep(aux[1:365,2],10)
# criando objeto xts para sazonalidade
sazoxts = xts(sazo, order.by = as.Date(data[,1],"%Y-%m-%d"))
# plotando sazonalidade (sazoxts)
dygraph(sazoxts)
# subtraindo a sazonalidade da série
aux2 = data[,2] - sazo
# criando objeto ts da série sem subtraida pela sazonalidade
tsnosazo = ts(aux2, start = c(1981,1), frequency = 365)
# criando objeto xts da série subtraida pela sazonalidade
newxts = xts(new[,2], order.by = as.Date(data[,1],"%Y-%m-%d"))
# plotando a serie subtraida pela sazonalidade
dygraph(newxts)
# # suavização exponencial com alpha = 0.7
# suav = exps(data[,2],0.7)
#
# suavxts = xts(suav, order.by = as.Date(data[,1], "%Y-%m-%d"))
# diferenciando a serie temporal d vezes para tentar estacionalizar a série
tsdif = diff(ts2)
acf(tsdif,lag.max = 20)
pacf(tsdif,lag.max = 20)
## Modelando ##
N = 3650
p = 2
q = 2
# MA(2) = ARIMA(0,0,1)
ma2 = arima(tsnosazo, order = c(0,0,2))
# AR(2) = ARIMA(2,0,0)
ar2 = arima(tsnosazo, order = c(2,0,0))
# ARMA(2,2) = ARIMA(2,0,2)
arma22 = arima(tsnosazo, order = c(2,0,2))
# ARIMA(2,1,2)
arima212 = arima(ts2, order = c(2,1,2))
ar2 = Arima(tsnosazo, order = c(2,0,0))
require("forecast")
ar2 = Arima(tsnosazo, order = c(2,0,0))
ar2
# programmer: Giovani C R
# link da fonte:
# https://datamarket.com/data/set/2323/daily-maximum-temperatures-in-melbourne-australia-1981-1990#!ds=2323&display=line
rm(list=ls(all=TRUE))
library(dygraphs)
library(xts)
library(zoo)
# funçãoque calcula suavização exponencial
exps <- function(t,a){
if(a<0 || a>1) return("Para de ser burro vc errou o segundo parametro da função")
size <- length(t) # tamanho do vetor de retorno
aux <- rep(0,size) # criando o vetor de retorno
aux[1] <- t[1] # atribuindo o primeiro passo
for(i in 2:size){ # calculando a suavização exponencial
aux[i] <- a*t[i] + (1-a)*t[i-1]
}
return(aux) # retornando o vetor com a suavização esponencial
}
#lendo os dados
data = read.csv("daily-maximum-temperatures-in-me.csv",sep=",",header=T)
# criando o objeto ts serie temporal
ts2 = ts(data[,2],start=c(1981,1),frequency = 365)
# decomposição sazonal
fit2 = stl(ts2,s.window = 365)
# atribuindo a tendencia
trend = fit2$time.series[,2]
# criando xts serie temporal
ts3 = as.xts(data[,2],order.by = as.Date(data[,1],"%Y-%m-%d"))
# serie temporal do primeiro ano 1981
xts81 = xts(data[1:365,2],order.by = as.Date(data[1:365,1],"%Y-%m-%d"))
# criando dygraph
dygraph(ts3) %>%
#   dySeries("mdeaths", label = "Male") %>%
#   dySeries("fdeaths", label = "Female") %>%
dyOptions(stackedGraph = FALSE) %>%
dyRangeSelector(height = 20)
dygraph(xts81) %>%
dyRangeSelector(height = 20)
# estimando a sazonalidade
aux = data
for(i in 1:365)
{
for(k in 1:9)
{
aux[i,2] = aux[i,2] + aux[i+(k*365),2]
}
}
aux[,2] = aux[,2]/10
sazo = rep(aux[1:365,2],10)
# criando objeto xts para sazonalidade
sazoxts = xts(sazo, order.by = as.Date(data[,1],"%Y-%m-%d"))
# plotando sazonalidade (sazoxts)
dygraph(sazoxts)
# subtraindo a sazonalidade da série
aux2 = data[,2] - sazo
# criando objeto ts da série sem subtraida pela sazonalidade
tsnosazo = ts(aux2, start = c(1981,1), frequency = 365)
# criando objeto xts da série subtraida pela sazonalidade
newxts = xts(new[,2], order.by = as.Date(data[,1],"%Y-%m-%d"))
# plotando a serie subtraida pela sazonalidade
dygraph(newxts)
# # suavização exponencial com alpha = 0.7
# suav = exps(data[,2],0.7)
#
# suavxts = xts(suav, order.by = as.Date(data[,1], "%Y-%m-%d"))
# diferenciando a serie temporal d vezes para tentar estacionalizar a série
tsdif = diff(ts2)
acf(tsdif,lag.max = 20)
pacf(tsdif,lag.max = 20)
## Modelando ##
# carregando pacote forecast
library(forecast)
N = 3650
p = 2
q = 2
# MA(2) = ARIMA(0,0,1)
ma2 = Arima(tsnosazo, order = c(0,0,2))
# AR(2) = ARIMA(2,0,0)
ar2 = Arima(tsnosazo, order = c(2,0,0))
# ARMA(2,2) = ARIMA(2,0,2)
arma22 = Arima(tsnosazo, order = c(2,0,2))
# ARIMA(2,1,2)
arima212 = Arima(ts2, order = c(2,1,2))
names(ar2)
ar2$x
View(tsnosazo)
View(ar2$x)
ar2 = Arima(tsnosazo, order = c(2,1,0))
ar2
ar2 = Arima(tsnosazo, order = c(2,0,0))
ar2
?Arima
ar2 = Arima(tsnosazo, order = c(2,0,0))
tsnosazo - ar2$x
vai =tsnosazo - ar2$x
plot.ts(vai)
tsnosazo
ar2$x
vai =tsnosazo - ar2$residuals
vai
plot.ts(vai)
fitar2 =tsnosazo - ar2$residuals
?is
is((tsnosazo - fitar2) = ar2$residuals)
if ((tsnosazo - fitar2) = ar2$residuals) a = 1
if((tsnosazo - fitar2) = ar2$residuals) a = 1
if((tsnosazo - fitar2) == ar2$residuals) a = 1
View(ar2$residuals)
View(tsnosazo-fitar2)
sazo
is.ts(sazo)
fit2
plot.ts(fit2)
fit2 = stl(ts2,s.window = 365)
fit2
sazots = ts(sazo, start = c(1981,1),frequency = 365 )
plot.ts(sazots)
artsfit = sazots + fitar2
plot.ts(artsfit)
arres = ts2 - artsfit
plot.ts(arres)
plot.ts(ar2$residuals)
aux = as.data.frame(arres)
View(aux)
aux
aux = as.data.frame(artsfit)
aux
aux[,1]
arxtsfit = xts(aux[,1], order.by = as.Date(data[,1],"%Y-%m-%d"))
arxtsfit
dygraph(arxtsfit)
tss = cbind(ts3, arxtsfit)
dygraph(tss, main = "Series de temperatura") %>%
dyHighlight(highlightCircleSize = 5,
highlightSeriesBackgroundAlpha = 0.2,
hideOnMouseOut = FALSE)
ldeaths
is.ts(ldeaths)
dygraph(tss, main = "Series de temperatura") %>%
dyHighlight(highlightSeriesOpts = list(strokeWidth = 3))
dygraph(tss, main = "Series de temperatura") %>%
dyRangeSelector()
Acf(ts3)
Pacf(ts3)
hw <- HoltWinters(arxtsfit)
plot.ts(arxtsfit)
dygraph(tss, main = "Series de temperatura") %>%
dyRangeSelector() %>%
dySeries("V1", label ="iha")
tss
# programmer: Giovani C R
# link da fonte:
# https://datamarket.com/data/set/2323/daily-maximum-temperatures-in-melbourne-australia-1981-1990#!ds=2323&display=line
rm(list=ls(all=TRUE))
library(dygraphs)
library(xts)
library(zoo)
# funçãoque calcula suavização exponencial
exps <- function(t,a){
if(a<0 || a>1) return("Para de ser burro vc errou o segundo parametro da função")
size <- length(t) # tamanho do vetor de retorno
aux <- rep(0,size) # criando o vetor de retorno
aux[1] <- t[1] # atribuindo o primeiro passo
for(i in 2:size){ # calculando a suavização exponencial
aux[i] <- a*t[i] + (1-a)*t[i-1]
}
return(aux) # retornando o vetor com a suavização esponencial
}
#lendo os dados
data = read.csv("daily-maximum-temperatures-in-me.csv",sep=",",header=T)
# criando o objeto ts serie temporal
ts2 = ts(data[,2],start=c(1981,1),frequency = 365)
# decomposição sazonal
fit2 = stl(ts2,s.window = 365)
# atribuindo a tendencia
trend = fit2$time.series[,2]
# criando xts serie temporal
ts3 = as.xts(data[,2],order.by = as.Date(data[,1],"%Y-%m-%d"))
# serie temporal do primeiro ano 1981
xts81 = xts(data[1:365,2],order.by = as.Date(data[1:365,1],"%Y-%m-%d"))
# criando dygraph
dygraph(ts3) %>%
#   dySeries("mdeaths", label = "Male") %>%
#   dySeries("fdeaths", label = "Female") %>%
dyOptions(stackedGraph = FALSE) %>%
dyRangeSelector(height = 20)
dygraph(xts81) %>%
dyRangeSelector(height = 20)
# estimando a sazonalidade
aux = data
for(i in 1:365)
{
for(k in 1:9)
{
aux[i,2] = aux[i,2] + aux[i+(k*365),2]
}
}
aux[,2] = aux[,2]/10
sazo = rep(aux[1:365,2],10)
# criando objeto ts para sazonalidade
sazots = ts(sazo, start = c(1981,1),frequency = 365 )
# criando objeto xts para sazonalidade
sazoxts = xts(sazo, order.by = as.Date(data[,1],"%Y-%m-%d"))
# plotando sazonalidade (sazoxts)
dygraph(sazoxts)
# subtraindo a sazonalidade da série
aux2 = data[,2] - sazo
# criando objeto ts da série sem subtraida pela sazonalidade
tsnosazo = ts(aux2, start = c(1981,1), frequency = 365)
# criando objeto xts da série subtraida pela sazonalidade
newxts = xts(new[,2], order.by = as.Date(data[,1],"%Y-%m-%d"))
# plotando a serie subtraida pela sazonalidade
dygraph(newxts)
# # suavização exponencial com alpha = 0.7
# suav = exps(data[,2],0.7)
#
# suavxts = xts(suav, order.by = as.Date(data[,1], "%Y-%m-%d"))
# diferenciando a serie temporal d vezes para tentar estacionalizar a série
tsdif = diff(ts2)
acf(tsdif,lag.max = 20)
pacf(tsdif,lag.max = 20)
## Modelando ##
# carregando pacote forecast
library(forecast)
N = 3650
p = 2
q = 2
# MA(2) = ARIMA(0,0,1)
ma2 = Arima(tsnosazo, order = c(0,0,2))
##  SERIE - SERIEAJUSTADA = RESIDUO => SERIEAJUSTADA = SERIE - RESIDUO ##
# AR(2) = ARIMA(2,0,0)
ar2 = Arima(tsnosazo, order = c(2,0,0))
# componente estocastica ajustada
fitar2 =tsnosazo - ar2$residuals
# componente estocastica mais comp. sazonal = serie ajustada
artsfit = sazots + fitar2
# residuo levando em consideração a série estimada
arres = ts2 - artsfit
# plot da série estimada
aux = as.data.frame(artsfit)
arxtsfit = xts(aux[,1], order.by = as.Date(data[,1],"%Y-%m-%d"))
dygraph(arxtsfit)
# (tsnosazo - fitar2) == ar2$residuals
# ARMA(2,2) = ARIMA(2,0,2)
arma22 = Arima(tsnosazo, order = c(2,0,2))
# ARIMA(2,1,2)
arima212 = Arima(ts2, order = c(2,1,2))
tss = cbind(ts3, arxtsfit)
dygraph(tss, main = "Series de temperatura") %>%
dyRangeSelector()
devtools::install_github("rstudio/rmarkdown")
