legend("bottomright", legend=c("Line 1", "Line 2","Line3"),col=c("red", "blue","green"), lty=1:2, cex=0.8)
points(tsma,type="l",col="red",lwd=1,lty=1)
points(tsexp,type="l",col="green",lwd=1,lty=1)
legend("bottomright", legend=c("Line 1", "Line 2","Line3"),col=c("red", "blue","green"), lty=1, cex=0.8)
# Programmer: Giovani Carrara Rodrigues
# date: ago/24/2015
# description: Creating a fake time-series, a moving average filter and a exponential smoothing filter
# Inicio do exercício a) Creating a fake time-series
rm(list=ls(all=T)) # remove content from the Environment
set.seed(2015)
N <- 100 # quantidade de valores gerados
vari <- 1 # atribuindo variância do erro aleatório "a"
aver <- 0 # atribuindo média do erro aleatório "a"
# declarando vetores de cada componente da série temporal
z   <- rep(0,N) # componente estocástica
a   <- rep(0,N) # erro aletório gerado por uma dist. normal
tre <- rep(0,N) # tendencia
x   <- rep(0,N) # valor fake da série
trend <- function(j){
# Coeficientes tendencia dada pelo polinômio trend = alpha0 + alpha1*t + alpha2*(t^2)
alpha0 <- 1
alpha1 <- 0.5
alpha2 <- 0
aux <- alpha0 + alpha1*j + alpha2*(j^2)
return(aux)
}
#trend[1] <- alpha0 + alpha1*1 + alpha2*(1^2)
# atribuindo valor à primeira posição de x
a[1]   <- rnorm(1,0,1)
z[1]   <- 0
tre[1] <- trend(1)
x[1]   <- trend(1) + z[1]
#Gerando a série temporal
for(i in 2:N){
a[i]   <- rnorm(1,aver,vari)
z[i]   <- 0.5*z[i-1] + a[i]
tre[i] <- trend(i)
x[i]   <- tre[i] + z[i]
cat(i,"\n")
}
ts.plot(x,main="Time-series Bjundas") # plotando o gráfico da série temporal
# Salvando o gráfico da série temporal em pdf
pdf(paste("time-series","mean=",as.character(aver),"var=",as.character(vari),"N=",as.character(N),".pdf"))
plot(x,type="l",col="#00FFFF",lwd=1,lty=1)
dev.off()
#final exercício a)
# Início exercício b) moving average filter
# função para calcular as médias móveis, onde t é a entrada da série e j é índice "k" das médias móveis
maf <- function(t,j) {
if(j>length(t)) return("jumento, o tamanho da média móvel nao pode ser maior que o tamanho da série")
size <- length(t)-2*j # tamanho da nova série
p <-j # atribuindo para nao dar problema
#contr <- 2*j # talves eu use
aux <- rep(0,size) # criando vetor da série filtrada
for(k in 1:size){ # gerando a série filtrada
o <- 1
aux[k] <- t[k+p] # atribuindo valor central
while(o <= j){
aux[k] <- aux[k]+t[k+p-o] + t[k+p+o] #atribuindo valores com mesma distância
o <- o+1
}
aux[k] <- aux[k]/(2*j+1) # dividindo pela quantidade de valores na média móvel
}
return(aux) # retornando a série filtrada
}
tam <- 2 # k das médias móveis
tsma <- maf(x,tam) # chamando a função que calcula as médias móveis
pdf(paste("time-series after moving average","mean=",as.character(aver),"var=",as.character(vari),"N=",as.character(N),".pdf"))
ts.plot(tsma,main="Time-series after moving average Bjundas")
dev.off()
# final exercício b)
# Início exercício c) exponential smoothing
exps <- function(t,a){
if(a<0 || a>1) return("Para de ser burro vc errou o segundo parametro da função")
size <- length(t)
aux <- rep(0,size)
aux[1] <- t[1]
for(i in 2:size){
aux[i] <- a*t[i] + (1-a)*t[i-1]
}
return(aux)
}
tsexp <- exps(x,0.4)
# plotando o gráfico final
plot(x,type="l",col="blue",lwd=1,lty=1)
points(tsma,type="l",col="red",lwd=1,lty=1)
points(tsexp,type="l",col="green",lwd=1,lty=1)
legend("bottomright", legend=c("Line 1", "Line 2","Line3"),col=c("Time-Series Bjudas", "moving average","exponential smoothing"), lty=1, cex=0.8)
# Programmer: Giovani Carrara Rodrigues
# date: ago/24/2015
# description: Creating a fake time-series, a moving average filter and a exponential smoothing filter
# Inicio do exercício a) Creating a fake time-series
rm(list=ls(all=T)) # remove content from the Environment
set.seed(2015)
N <- 100 # quantidade de valores gerados
vari <- 1 # atribuindo variância do erro aleatório "a"
aver <- 0 # atribuindo média do erro aleatório "a"
# declarando vetores de cada componente da série temporal
z   <- rep(0,N) # componente estocástica
a   <- rep(0,N) # erro aletório gerado por uma dist. normal
tre <- rep(0,N) # tendencia
x   <- rep(0,N) # valor fake da série
trend <- function(j){
# Coeficientes tendencia dada pelo polinômio trend = alpha0 + alpha1*t + alpha2*(t^2)
alpha0 <- 1
alpha1 <- 0.5
alpha2 <- 0
aux <- alpha0 + alpha1*j + alpha2*(j^2)
return(aux)
}
#trend[1] <- alpha0 + alpha1*1 + alpha2*(1^2)
# atribuindo valor à primeira posição de x
a[1]   <- rnorm(1,0,1)
z[1]   <- 0
tre[1] <- trend(1)
x[1]   <- trend(1) + z[1]
#Gerando a série temporal
for(i in 2:N){
a[i]   <- rnorm(1,aver,vari)
z[i]   <- 0.5*z[i-1] + a[i]
tre[i] <- trend(i)
x[i]   <- tre[i] + z[i]
cat(i,"\n")
}
ts.plot(x,main="Time-series Bjundas") # plotando o gráfico da série temporal
# Salvando o gráfico da série temporal em pdf
pdf(paste("time-series","mean=",as.character(aver),"var=",as.character(vari),"N=",as.character(N),".pdf"))
plot(x,type="l",col="#00FFFF",lwd=1,lty=1)
dev.off()
#final exercício a)
# Início exercício b) moving average filter
# função para calcular as médias móveis, onde t é a entrada da série e j é índice "k" das médias móveis
maf <- function(t,j) {
if(j>length(t)) return("jumento, o tamanho da média móvel nao pode ser maior que o tamanho da série")
size <- length(t)-2*j # tamanho da nova série
p <-j # atribuindo para nao dar problema
#contr <- 2*j # talves eu use
aux <- rep(0,size) # criando vetor da série filtrada
for(k in 1:size){ # gerando a série filtrada
o <- 1
aux[k] <- t[k+p] # atribuindo valor central
while(o <= j){
aux[k] <- aux[k]+t[k+p-o] + t[k+p+o] #atribuindo valores com mesma distância
o <- o+1
}
aux[k] <- aux[k]/(2*j+1) # dividindo pela quantidade de valores na média móvel
}
return(aux) # retornando a série filtrada
}
tam <- 2 # k das médias móveis
tsma <- maf(x,tam) # chamando a função que calcula as médias móveis
pdf(paste("time-series after moving average","mean=",as.character(aver),"var=",as.character(vari),"N=",as.character(N),".pdf"))
ts.plot(tsma,main="Time-series after moving average Bjundas")
dev.off()
# final exercício b)
# Início exercício c) exponential smoothing
exps <- function(t,a){
if(a<0 || a>1) return("Para de ser burro vc errou o segundo parametro da função")
size <- length(t)
aux <- rep(0,size)
aux[1] <- t[1]
for(i in 2:size){
aux[i] <- a*t[i] + (1-a)*t[i-1]
}
return(aux)
}
tsexp <- exps(x,0.4)
# plotando o gráfico final
plot(x,type="l",col="blue",lwd=1,lty=1)
points(tsma,type="l",col="red",lwd=1,lty=1)
points(tsexp,type="l",col="green",lwd=1,lty=1)
legend("bottomright", legend=c("Time-Series Bjudas", "moving average","exponential smoothing"),col=c("Blue", "red","green"), lty=1, cex=0.8)
# Programmer: Giovani Carrara Rodrigues
# date: ago/24/2015
# description: Creating a fake time-series, a moving average filter and a exponential smoothing filter
# Inicio do exercício a) Creating a fake time-series
rm(list=ls(all=T)) # remove content from the Environment
set.seed(2015)
N <- 100 # quantidade de valores gerados
vari <- 1 # atribuindo variância do erro aleatório "a"
aver <- 0 # atribuindo média do erro aleatório "a"
# declarando vetores de cada componente da série temporal
z   <- rep(0,N) # componente estocástica
a   <- rep(0,N) # erro aletório gerado por uma dist. normal
tre <- rep(0,N) # tendencia
x   <- rep(0,N) # valor fake da série
trend <- function(j){
# Coeficientes tendencia dada pelo polinômio trend = alpha0 + alpha1*t + alpha2*(t^2)
alpha0 <- 1
alpha1 <- 0.5
alpha2 <- 0
aux <- alpha0 + alpha1*j + alpha2*(j^2)
return(aux)
}
#trend[1] <- alpha0 + alpha1*1 + alpha2*(1^2)
# atribuindo valor à primeira posição de x
a[1]   <- rnorm(1,0,1)
z[1]   <- 0
tre[1] <- trend(1)
x[1]   <- trend(1) + z[1]
#Gerando a série temporal
for(i in 2:N){
a[i]   <- rnorm(1,aver,vari)
z[i]   <- 0.5*z[i-1] + a[i]
tre[i] <- trend(i)
x[i]   <- tre[i] + z[i]
cat(i,"\n")
}
ts.plot(x,main="Time-series Bjundas") # plotando o gráfico da série temporal
# Salvando o gráfico da série temporal em pdf
pdf(paste("time-series","mean=",as.character(aver),"var=",as.character(vari),"N=",as.character(N),".pdf"))
plot(x,type="l",col="#00FFFF",lwd=1,lty=1)
dev.off()
#final exercício a)
# Início exercício b) moving average filter
# função para calcular as médias móveis, onde t é a entrada da série e j é índice "k" das médias móveis
maf <- function(t,j) {
if(j>length(t)) return("jumento, o tamanho da média móvel nao pode ser maior que o tamanho da série")
size <- length(t)-2*j # tamanho da nova série
p <-j # atribuindo para nao dar problema
#contr <- 2*j # talves eu use
aux <- rep(0,size) # criando vetor da série filtrada
for(k in 1:size){ # gerando a série filtrada
o <- 1
aux[k] <- t[k+p] # atribuindo valor central
while(o <= j){
aux[k] <- aux[k]+t[k+p-o] + t[k+p+o] #atribuindo valores com mesma distância
o <- o+1
}
aux[k] <- aux[k]/(2*j+1) # dividindo pela quantidade de valores na média móvel
}
return(aux) # retornando a série filtrada
}
tam <- 2 # k das médias móveis
tsma <- maf(x,tam) # chamando a função que calcula as médias móveis
pdf(paste("time-series after moving average","mean=",as.character(aver),"var=",as.character(vari),"N=",as.character(N),".pdf"))
ts.plot(tsma,main="Time-series after moving average Bjundas")
dev.off()
# final exercício b)
# Início exercício c) exponential smoothing
exps <- function(t,a){
if(a<0 || a>1) return("Para de ser burro vc errou o segundo parametro da função")
size <- length(t)
aux <- rep(0,size)
aux[1] <- t[1]
for(i in 2:size){
aux[i] <- a*t[i] + (1-a)*t[i-1]
}
return(aux)
}
tsexp <- exps(x,0.4)
# plotando o gráfico final
plot(x,type="l",col="blue",lwd=1,lty=1)
points(tsma,type="l",col="red",lwd=1,lty=1)
points(tsexp,type="l",col="green",lwd=1,lty=1)
legend("bottomright", legend=c("TS Bjudas", "moving average","exp smoothing"),col=c("Blue", "red","green"), lty=1, cex=0.8)
# Programmer: Giovani Carrara Rodrigues
# date: ago/24/2015
# description: Creating a fake time-series, a moving average filter and a exponential smoothing filter
# Inicio do exercício a) Creating a fake time-series
rm(list=ls(all=T)) # remove content from the Environment
set.seed(2015)
N <- 100 # quantidade de valores gerados
vari <- 1 # atribuindo variância do erro aleatório "a"
aver <- 0 # atribuindo média do erro aleatório "a"
# declarando vetores de cada componente da série temporal
z   <- rep(0,N) # componente estocástica
a   <- rep(0,N) # erro aletório gerado por uma dist. normal
tre <- rep(0,N) # tendencia
x   <- rep(0,N) # valor fake da série
trend <- function(j){
# Coeficientes tendencia dada pelo polinômio trend = alpha0 + alpha1*t + alpha2*(t^2)
alpha0 <- 1
alpha1 <- 0.5
alpha2 <- 0
aux <- alpha0 + alpha1*j + alpha2*(j^2)
return(aux)
}
#trend[1] <- alpha0 + alpha1*1 + alpha2*(1^2)
# atribuindo valor à primeira posição de x
a[1]   <- rnorm(1,0,1)
z[1]   <- 0
tre[1] <- trend(1)
x[1]   <- trend(1) + z[1]
#Gerando a série temporal
for(i in 2:N){
a[i]   <- rnorm(1,aver,vari)
z[i]   <- 0.5*z[i-1] + a[i]
tre[i] <- trend(i)
x[i]   <- tre[i] + z[i]
cat(i,"\n")
}
ts.plot(x,main="Time-series Bjundas") # plotando o gráfico da série temporal
# Salvando o gráfico da série temporal em pdf
pdf(paste("time-series","mean=",as.character(aver),"var=",as.character(vari),"N=",as.character(N),".pdf"))
plot(x,type="l",col="#00FFFF",lwd=1,lty=1)
dev.off()
#final exercício a)
# Início exercício b) moving average filter
# função para calcular as médias móveis, onde t é a entrada da série e j é índice "k" das médias móveis
maf <- function(t,j) {
if(j>length(t)) return("jumento, o tamanho da média móvel nao pode ser maior que o tamanho da série")
size <- length(t)-2*j # tamanho da nova série
p <-j # atribuindo para nao dar problema
#contr <- 2*j # talves eu use
aux <- rep(0,size) # criando vetor da série filtrada
for(k in 1:size){ # gerando a série filtrada
o <- 1
aux[k] <- t[k+p] # atribuindo valor central
while(o <= j){
aux[k] <- aux[k]+t[k+p-o] + t[k+p+o] #atribuindo valores com mesma distância
o <- o+1
}
aux[k] <- aux[k]/(2*j+1) # dividindo pela quantidade de valores na média móvel
}
return(aux) # retornando a série filtrada
}
tam <- 2 # k das médias móveis
tsma <- maf(x,tam) # chamando a função que calcula as médias móveis
pdf(paste("time-series after moving average","mean=",as.character(aver),"var=",as.character(vari),"N=",as.character(N),".pdf"))
ts.plot(tsma,main="Time-series after moving average Bjundas")
dev.off()
# final exercício b)
# Início exercício c) exponential smoothing
exps <- function(t,a){
if(a<0 || a>1) return("Para de ser burro vc errou o segundo parametro da função")
size <- length(t)
aux <- rep(0,size)
aux[1] <- t[1]
for(i in 2:size){
aux[i] <- a*t[i] + (1-a)*t[i-1]
}
return(aux)
}
tsexp <- exps(x,0.4)
# plotando o gráfico final
plot(x,type="l",main="Série-temporal Bjundas com alguns filtros",col="blue",lwd=1,lty=1)
points(tsma,type="l",col="red",lwd=1,lty=1)
points(tsexp,type="l",col="green",lwd=1,lty=1)
legend("bottomright", legend=c("TS Bjudas", "moving average","exp smoothing"),col=c("Blue", "red","green"), lty=1, cex=0.8)
# Programmer: Giovani Carrara Rodrigues
# date: ago/24/2015
# description: Creating a fake time-series, a moving average filter and a exponential smoothing filter
# Inicio do exercício a) Creating a fake time-series
rm(list=ls(all=T)) # remove content from the Environment
set.seed(2015)
N <- 100 # quantidade de valores gerados
vari <- 1 # atribuindo variância do erro aleatório "a"
aver <- 0 # atribuindo média do erro aleatório "a"
# declarando vetores de cada componente da série temporal
z   <- rep(0,N) # componente estocástica
a   <- rep(0,N) # erro aletório gerado por uma dist. normal
tre <- rep(0,N) # tendencia
x   <- rep(0,N) # valor fake da série
trend <- function(j){
# Coeficientes tendencia dada pelo polinômio trend = alpha0 + alpha1*t + alpha2*(t^2)
alpha0 <- 1
alpha1 <- 0.5
alpha2 <- 0
aux <- alpha0 + alpha1*j + alpha2*(j^2)
return(aux)
}
#trend[1] <- alpha0 + alpha1*1 + alpha2*(1^2)
# atribuindo valor à primeira posição de x
a[1]   <- rnorm(1,0,1)
z[1]   <- 0
tre[1] <- trend(1)
x[1]   <- trend(1) + z[1]
#Gerando a série temporal
for(i in 2:N){
a[i]   <- rnorm(1,aver,vari)
z[i]   <- 0.5*z[i-1] + a[i]
tre[i] <- trend(i)
x[i]   <- tre[i] + z[i]
cat(i,"\n")
}
ts.plot(x,main="Time-series Bjundas") # plotando o gráfico da série temporal
# Salvando o gráfico da série temporal em pdf
pdf(paste("time-series","mean=",as.character(aver),"var=",as.character(vari),"N=",as.character(N),".pdf"))
plot(x,type="l",col="#00FFFF",lwd=1,lty=1)
dev.off()
#final exercício a)
# Início exercício b) moving average filter
# função para calcular as médias móveis, onde t é a entrada da série e j é índice "k" das médias móveis
maf <- function(t,j) {
if(j>length(t)) return("jumento, o tamanho da média móvel nao pode ser maior que o tamanho da série")
size <- length(t)-2*j # tamanho da nova série
p <-j # atribuindo para nao dar problema
#contr <- 2*j # talves eu use
aux <- rep(0,size) # criando vetor da série filtrada
for(k in 1:size){ # gerando a série filtrada
o <- 1
aux[k] <- t[k+p] # atribuindo valor central
while(o <= j){
aux[k] <- aux[k]+t[k+p-o] + t[k+p+o] #atribuindo valores com mesma distância
o <- o+1
}
aux[k] <- aux[k]/(2*j+1) # dividindo pela quantidade de valores na média móvel
}
return(aux) # retornando a série filtrada
}
tam <- 2 # k das médias móveis
tsma <- maf(x,tam) # chamando a função que calcula as médias móveis
pdf(paste("time-series after moving average","mean=",as.character(aver),"var=",as.character(vari),"N=",as.character(N),".pdf"))
ts.plot(tsma,main="Time-series after moving average Bjundas")
dev.off()
# final exercício b)
# Início exercício c) exponential smoothing
exps <- function(t,a){
if(a<0 || a>1) return("Para de ser burro vc errou o segundo parametro da função")
size <- length(t)
aux <- rep(0,size)
aux[1] <- t[1]
for(i in 2:size){
aux[i] <- a*t[i] + (1-a)*t[i-1]
}
return(aux)
}
tsexp <- exps(x,0.4)
# plotando o gráfico final
pdf("bjundas.pdf")
plot(x,type="l",main="Série-temporal Bjundas com alguns filtros",col="blue",lwd=1,lty=1)
points(tsma,type="l",col="red",lwd=1,lty=1)
points(tsexp,type="l",col="green",lwd=1,lty=1)
legend("bottomright", legend=c("TS Bjudas", "moving average","exp smoothing"),col=c("Blue", "red","green"), lty=1, cex=0.8)
dev.off()
# Programmer: Giovani Carrara Rodrigues
# date: ago/24/2015
# description: Creating a fake time-series, a moving average filter and a exponential smoothing filter
# Inicio do exercício a) Creating a fake time-series
rm(list=ls(all=T)) # remove content from the Environment
set.seed(2015)
N <- 100 # quantidade de valores gerados
vari <- 1 # atribuindo variância do erro aleatório "a"
aver <- 0 # atribuindo média do erro aleatório "a"
# declarando vetores de cada componente da série temporal
z   <- rep(0,N) # componente estocástica
a   <- rep(0,N) # erro aletório gerado por uma dist. normal
tre <- rep(0,N) # tendencia
x   <- rep(0,N) # valor fake da série
trend <- function(j){
# Coeficientes tendencia dada pelo polinômio trend = alpha0 + alpha1*t + alpha2*(t^2)
alpha0 <- 1
alpha1 <- 0.5
alpha2 <- 0
aux <- alpha0 + alpha1*j + alpha2*(j^2)
return(aux)
}
#trend[1] <- alpha0 + alpha1*1 + alpha2*(1^2)
# atribuindo valor à primeira posição de x
a[1]   <- rnorm(1,0,1)
z[1]   <- 0
tre[1] <- trend(1)
x[1]   <- trend(1) + z[1]
#Gerando a série temporal
for(i in 2:N){
a[i]   <- rnorm(1,aver,vari)
z[i]   <- 0.5*z[i-1] + a[i]
tre[i] <- trend(i)
x[i]   <- tre[i] + z[i]
cat(i,"\n")
}
ts.plot(x,main="Time-series Bjundas") # plotando o gráfico da série temporal
# Salvando o gráfico da série temporal em pdf
pdf(paste("time-series","mean=",as.character(aver),"var=",as.character(vari),"N=",as.character(N),".pdf"))
plot(x,type="l",col="#00FFFF",lwd=1,lty=1)
dev.off()
#final exercício a)
# Início exercício b) moving average filter
# função para calcular as médias móveis, onde t é a entrada da série e j é índice "k" das médias móveis
maf <- function(t,j) {
if(j>length(t)) return("jumento, o tamanho da média móvel nao pode ser maior que o tamanho da série")
size <- length(t)-2*j # tamanho da nova série
p <-j # atribuindo para nao dar problema
#contr <- 2*j # talves eu use
aux <- rep(0,size) # criando vetor da série filtrada
for(k in 1:size){ # gerando a série filtrada
o <- 1
aux[k] <- t[k+p] # atribuindo valor central
while(o <= j){
aux[k] <- aux[k]+t[k+p-o] + t[k+p+o] #atribuindo valores com mesma distância
o <- o+1
}
aux[k] <- aux[k]/(2*j+1) # dividindo pela quantidade de valores na média móvel
}
return(aux) # retornando a série filtrada
}
tam <- 2 # k das médias móveis
tsma <- maf(x,tam) # chamando a função que calcula as médias móveis
pdf(paste("time-series after moving average","mean=",as.character(aver),"var=",as.character(vari),"N=",as.character(N),".pdf"))
ts.plot(tsma,main="Time-series after moving average Bjundas")
dev.off()
# final exercício b)
# Início exercício c) exponential smoothing
exps <- function(t,a){
if(a<0 || a>1) return("Para de ser burro vc errou o segundo parametro da função")
size <- length(t) # tamanho do vetor de retorno
aux <- rep(0,size) # criando o vetor de retorno
aux[1] <- t[1] # atribuindo o primeiro passo
for(i in 2:size){ # calculando a suavização exponencial
aux[i] <- a*t[i] + (1-a)*t[i-1]
}
return(aux) # retornando o vetor com a suavização esponencial
}
tsexp <- exps(x,0.4)
# plotando o gráfico final
pdf("bjundas.pdf")
plot(x,type="l",main="Série-temporal Bjundas com alguns filtros",col="blue",lwd=1,lty=1)
points(tsma,type="l",col="red",lwd=1,lty=1)
points(tsexp,type="l",col="green",lwd=1,lty=1)
legend("bottomright", legend=c("TS Bjudas", "moving average","exp smoothing"),col=c("Blue", "red","green"), lty=1, cex=0.8)
dev.off()
